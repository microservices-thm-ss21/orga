openapi: 3.0.3
info:
  title: API Specification for Issue-Service
  description: API Specification for Issue-Service
  version: 1.0.0
servers:
  - url: 'http://localhost:8069/api/issues'
paths:
  /:
    get:
      description: |
        Returns all Issues saved within the issue service
      responses:
        '200':
          description: List of Issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfIssues'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

    post:
      description: Creates a new Issue
      requestBody:
        description: issueDTO
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueDTO'
      responses:
        '201':
          description: Issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        '400':
          description: IssueDTO was not complete
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Requester hat not the necessary permissions
        '404':
          description: Creator or assigned user do not exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

  /project/{projectId}:
    get:
      description: Get all Issues of the given project
      parameters:
        - name: projectId
          in: path
          description: ID of project
          required: true
          schema:
            type: string
            format: uuid
            example: "54ed2c8e-054d-4fb0-81ac-d7ed726b1879"
      responses:
        '200':
          description: List of Issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfIssues'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        default:
          description: unexpected error
          content:
           application/json:
              schema:
                type: string

  /{issueId}:
    get:
      description: Find issue by id
      parameters:
        - name: issueId
          in: path
          description: ID of issue
          required: true
          schema:
            type: string
            format: uuid
            example: "a3974d24-5735-410c-b109-ad262755d4d3"
      responses:
        '200':
          description: Issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Issue not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

    put:
      description: Updates existing Issue
      parameters:
        - name: issueId
          in: path
          description: ID of issue
          required: true
          schema:
            type: string
            format: uuid
            example: "a3974d24-5735-410c-b109-ad262755d4d3"
      requestBody:
        description: issueDTO
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueDTO'
      responses:
        '200':
          description: Updated Issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Requester hat not the necessary permissions
        '404':
          description: Issue Project or assined user do not exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

    delete:
      description: Deletes existing Issue
      parameters:
        - name: issueId
          in: path
          description: ID of issue
          required: true
          schema:
            type: string
            format: uuid
            example: "a3974d24-5735-410c-b109-ad262755d4d3"
      responses:
        '204':
          description: Deleting was successfull.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Requester hat not the necessary permissions
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
  schemas:
    Issue:
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        message:
          type: string
        assignedUserId:
          type: string
          format: uuid
          nullable: true
        deadline:
          type: string
          nullable: true
        createTime:
          type: string
        updateTime:
          type: string
          nullable: true

    ArrayOfIssues:
      type: array
      items:
        $ref: '#/components/schemas/Issue'

    IssueDTO:
      example:
        {"message":"messsage",
          "assignedUserId":"a443ffd0-f7a8-44f6-8ad3-87acd1e91042",
          "projectId": "54ed2c8e-054d-4fb0-81ac-d7ed726b1879",
          "deadline": "01.01.2001"}
      type: object
      required:
        - message
        - projectId
        - assignedUserId
        - deadline
      properties:
        message:
          type: string
        projectId:
          type: string
          format: uuid
        assignedUserId:
          type: string
          format: uuid
        deadline:
          type: string
          format: date
          example: "01.01.2001"
